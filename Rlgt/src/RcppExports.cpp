// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_GridSampleTauPhi
NumericVector rcpp_GridSampleTauPhi(NumericMatrix T, NumericVector u, NumericVector chi2, NumericVector e, NumericVector logl, NumericVector omega2, NumericVector nu);
RcppExport SEXP _Rlgt_rcpp_GridSampleTauPhi(SEXP TSEXP, SEXP uSEXP, SEXP chi2SEXP, SEXP eSEXP, SEXP loglSEXP, SEXP omega2SEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type chi2(chi2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type e(eSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type logl(loglSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega2(omega2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_GridSampleTauPhi(T, u, chi2, e, logl, omega2, nu));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_GridSamplePhi
List rcpp_GridSamplePhi(NumericVector T, NumericVector u, NumericVector chi2, NumericVector tau, NumericVector e, NumericVector logl, NumericVector nu);
RcppExport SEXP _Rlgt_rcpp_GridSamplePhi(SEXP TSEXP, SEXP uSEXP, SEXP chi2SEXP, SEXP tauSEXP, SEXP eSEXP, SEXP loglSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type T(TSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type chi2(chi2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type e(eSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type logl(loglSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_GridSamplePhi(T, u, chi2, tau, e, logl, nu));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_GridSampleRho
List rcpp_GridSampleRho(NumericVector R, NumericVector u, NumericVector ytilde, NumericVector v2, NumericVector logl, NumericVector w1, NumericVector nu, NumericVector rhoscale);
RcppExport SEXP _Rlgt_rcpp_GridSampleRho(SEXP RSEXP, SEXP uSEXP, SEXP ytildeSEXP, SEXP v2SEXP, SEXP loglSEXP, SEXP w1SEXP, SEXP nuSEXP, SEXP rhoscaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytilde(ytildeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type logl(loglSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rhoscale(rhoscaleSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_GridSampleRho(R, u, ytilde, v2, logl, w1, nu, rhoscale));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_GridSampleRhoGaussianMix
List rcpp_GridSampleRhoGaussianMix(NumericVector R, NumericVector u, NumericVector ytilde, NumericVector v2, NumericVector logl, NumericVector w1);
RcppExport SEXP _Rlgt_rcpp_GridSampleRhoGaussianMix(SEXP RSEXP, SEXP uSEXP, SEXP ytildeSEXP, SEXP v2SEXP, SEXP loglSEXP, SEXP w1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ytilde(ytildeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type logl(loglSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w1(w1SEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_GridSampleRhoGaussianMix(R, u, ytilde, v2, logl, w1));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_expsmooth
List rcpp_expsmooth(NumericVector y, NumericVector alphaV, NumericVector betaV, NumericVector l1, NumericVector b1);
RcppExport SEXP _Rlgt_rcpp_expsmooth(SEXP ySEXP, SEXP alphaVSEXP, SEXP betaVSEXP, SEXP l1SEXP, SEXP b1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphaV(alphaVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type betaV(betaVSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b1(b1SEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_expsmooth(y, alphaV, betaV, l1, b1));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rlgt_rcpp_GridSampleTauPhi", (DL_FUNC) &_Rlgt_rcpp_GridSampleTauPhi, 7},
    {"_Rlgt_rcpp_GridSamplePhi", (DL_FUNC) &_Rlgt_rcpp_GridSamplePhi, 7},
    {"_Rlgt_rcpp_GridSampleRho", (DL_FUNC) &_Rlgt_rcpp_GridSampleRho, 8},
    {"_Rlgt_rcpp_GridSampleRhoGaussianMix", (DL_FUNC) &_Rlgt_rcpp_GridSampleRhoGaussianMix, 6},
    {"_Rlgt_rcpp_expsmooth", (DL_FUNC) &_Rlgt_rcpp_expsmooth, 5},
    {NULL, NULL, 0}
};

void rstan_additional_init(DllInfo *dll);
RcppExport void R_init_Rlgt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    rstan_additional_init(dll);
}
